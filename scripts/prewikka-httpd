#!/usr/bin/env python

# Copyright (C) 2004-2014 CS-SI. All Rights Reserved.
# Author: Nicolas Delon <nicolas.delon@prelude-ids.com>
#
# This file is part of the PreludeDB library.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
import cgi
import shutil
import getopt
import SocketServer, BaseHTTPServer
from prewikka import localization
from prewikka import Core, Request, siteconfig


class PrewikkaServer(SocketServer.ThreadingMixIn, BaseHTTPServer.HTTPServer):
    def __init__(self, core, *args, **kwargs):
        self.core = core
        apply(BaseHTTPServer.HTTPServer.__init__, (self,) + args, kwargs)



class PrewikkaRequestHandler(Request.Request, BaseHTTPServer.BaseHTTPRequestHandler):
    def getCookieString(self):
        return self.headers.get("Cookie")

    def getQueryString(self):
        return self._query_string

    def getReferer(self):
        try:
            return self.input_headers["referer"]
        except KeyError:
            return ""

    def write(self, data):
        self.wfile.write(data)

    def read(self, *args, **kwargs):
        return apply(self.rfile.read, args, kwargs)

    def log_request(self, *args, **kwargs):
        pass

    def log_error(self, *args, **kwargs):
        pass

    def _processDynamic(self, arguments):
        for name, value in arguments.items():
            self.arguments[name] = (len(value) == 1) and value[0] or value

        self.server.core.process(self)

    def sendHeaders(self, code=200, status_text=None):
        self.send_response(code)
        Request.Request.sendHeaders(self)

    def do_GET(self):
        self._query_string = self.path

        self.init()
        if self.path.startswith("/prewikka/"):
            self.processStatic(self.path, lambda fd: shutil.copyfileobj(fd, self.wfile))

        elif self.path.find("?") == 1:
            self._processDynamic(cgi.parse_qs(self.path[2:]))

        else:
            self._processDynamic({ })

    def do_HEAD(self):
        self.do_GET()

    def do_POST(self):
        self._query_string = self.rfile.read(int(self.headers["Content-Length"]))
        self.init()
        self._processDynamic(cgi.parse_qs((self._query_string)))

    def getClientAddr(self):
        return self.client_address[0]

    def getClientPort(self):
        return self.client_address[1]


def usage():
    print "Usage: %s [options]" % sys.argv[0]
    print
    print "Options:"
    print "-c --config [config]\tConfiguration file to use (default: %s/prewikka.conf)" % siteconfig.conf_dir
    print "-p --port [port]\tPort number to use (default: 8000)"
    print "-a --address [address]\tIP to bind to (default: 0.0.0.0)"
    print
    sys.exit(1)


if __name__ == "__main__":
    config = None
    addr, port = "0.0.0.0", 8000

    opts, args = getopt.getopt(sys.argv[1:], "hc:a:p:", ["help", "config=", "address=", "port="])
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()

        elif opt in ("-a", "--address"):
            addr = arg

        elif opt in ("-p", "--port"):
            port = int(arg)

        elif opt in ("-c", "--config"):
            config = arg

    core = Core.get_core_from_config(config)

    server = PrewikkaServer(core, (addr, port), PrewikkaRequestHandler)
    server.serve_forever()
